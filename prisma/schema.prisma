// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// Enums
// ------------------------------

enum UserStatus {
  active
  inactive
  banned
}

enum TokenType {
  refresh
  email_verify
  password_reset
}

// ------------------------------
// Core Models
// ------------------------------

model User {
  id              String     @id @default(cuid())
  email           String?    @unique
  phone           String?    @unique
  name            String?
  username        String?    @unique
  passwordHash    String?    @map("password_hash")
  status          UserStatus @default(active)
  emailVerifiedAt DateTime?  @map("email_verified_at")
  lastLoginAt     DateTime?  @map("last_login_at")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  deletedAt       DateTime?  @map("deleted_at")

  // Relations
  roles         UserRole[]     @relation("user_roles")
  tokens        Token[]        @relation("user_tokens")
  oauthAccounts OAuthAccount[] @relation("user_oauth_accounts")
  sessions      Session[]      @relation("user_sessions")
  apiKeys       ApiKey[]       @relation("user_api_keys")
  auditLogs     AuditLog[]     @relation("AuditLog_actor")

  @@index([status])
  @@index([deletedAt])
  @@map("user")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users       UserRole[]       @relation("role_users")
  permissions RolePermission[] @relation("role_permissions")

  @@map("role")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "user.read", "user.write"
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  roles RolePermission[] @relation("permission_roles")

  @@map("permission")
}

model UserRole {
  userId String @map("user_id")
  roleId String @map("role_id")

  // Relations
  user User @relation("user_roles", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation("role_users", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
  @@map("user_role")
}

model RolePermission {
  roleId       String @map("role_id")
  permissionId String @map("permission_id")

  role       Role       @relation("role_permissions", fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation("permission_roles", fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
  @@map("role_permission")
}

// ------------------------------
// Authn/Authz Artifacts
// ------------------------------

model Token {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  type       TokenType
  tokenHash  String    @unique @map("token_hash") // store a hash, never plaintext
  familyId   String?   @map("family_id")
  issuedAt   DateTime  @default(now()) @map("issued_at")
  expiresAt  DateTime  @map("expires_at")
  consumedAt DateTime? @map("consumed_at")
  revokedAt  DateTime? @map("revoked_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  metadata   Json?

  user User @relation("user_tokens", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([expiresAt])
  @@index([familyId])
  @@map("token")
}

model OAuthAccount {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  provider          String // e.g., "google", "github"
  providerAccountId String    @map("provider_account_id")
  accessToken       String?   @map("access_token")
  refreshToken      String?   @map("refresh_token")
  idToken           String?   @map("id_token")
  scope             String?
  expiresAt         DateTime? @map("expires_at")
  tokenType         String?   @map("token_type")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  metadata          Json?

  user User @relation("user_oauth_accounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("oauth_account")
}

model Session {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  sessionTokenHash String    @unique @map("session_token_hash")
  ip               String?   @db.Inet
  userAgent        String?   @map("user_agent")
  createdAt        DateTime  @default(now()) @map("created_at")
  lastSeenAt       DateTime? @map("last_seen_at")
  expiresAt        DateTime  @map("expires_at")
  revokedAt        DateTime? @map("revoked_at")

  user User @relation("user_sessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("session")
}

model ApiKey {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  name       String
  prefix     String // public prefix for quick identification
  keyHash    String    @unique @map("key_hash") // hashed secret
  scopes     String[] // postgres text[]
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  lastUsedAt DateTime? @map("last_used_at")
  expiresAt  DateTime? @map("expires_at")
  revokedAt  DateTime? @map("revoked_at")
  metadata   Json?

  user User @relation("user_api_keys", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("api_key")
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String?  @map("actor_user_id")
  action      String
  targetType  String?  @map("target_type")
  targetId    String?  @map("target_id")
  ip          String?  @db.Inet
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  metadata    Json?

  actor User? @relation("AuditLog_actor", fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([actorUserId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_log")
}
